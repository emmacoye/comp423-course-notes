{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Emma's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Emma Coye</li> <li>Reviewer: Manasi Chaudhary</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin this process you should install the following:</p> <ul> <li>Visual Studio Code</li> <li>Docker Desktop</li> <li>Dev Containers (Visual Studio Code Extension) --&gt; this will automatically install the extension for Rust Analyzer</li> </ul> <p>You should also have a general understanding of:</p> <ul> <li>Github </li> <li>Git</li> </ul>"},{"location":"tutorials/rust-setup/#create-your-new-project","title":"Create Your New Project","text":""},{"location":"tutorials/rust-setup/#1-initialize-git-repository","title":"1. Initialize Git Repository","text":"<p>Open your terminal or a command line prompt and type the following lines of code:</p> <pre><code># Create and enter new directory \nmkdir rust-hello-423 \ncd rust-hello-423\n\n# Initialize git repository \ngit init \n\n# Create initial commit with an empty README file\necho \"# Rust Hello COMP423\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial Commit For New Project\"\n</code></pre> <p>Note</p> <p>Initializing a git repository will allow you to track your changes and collaborate with teammates easily if necessary.</p>"},{"location":"tutorials/rust-setup/#create-a-remote-repository-on-github","title":"Create a Remote Repository on GitHub","text":"<p>(1) Log in to your GitHub account and navigate to the Create a New Repository page.</p> <p>(2) Fill in the details as follows:</p> <ul> <li>Repository Name: rust-hello-comp423</li> <li>Description: Something releated to how this is a \"Hello World\" program.</li> <li>Visibility: Public</li> </ul> <p>(3) Do not initialize the repository with a README, .gitignore, or license.</p> <p>(4) Click Create Repository.</p>"},{"location":"tutorials/rust-setup/#link-your-local-repository-to-github","title":"Link your Local Repository to GitHub","text":"<p>(1) Add the GitHub repository as a remote:</p> <p><pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-hello-comp423.git\n</code></pre> - Replace  with your GitHub username. <p>(2) Check your default branch name with the subcommand git branch. If it's not main, rename it to main with the following command: git branch -M main. Old versions of git choose the name master for the primary branch, but these days main is the standard primary branch name.</p> <p>(3) Push your local commits to the GitHub repository:</p> <pre><code>git push --set-upstream origin main\n</code></pre> <p>Understanding</p> <p>git push --set-upstream origin main: This command pushes the main branch to the remote repository origin. The --set-upstream flag sets up the main branch to track the remote branch, meaning future pushes and pulls can be done without specifying the branch name and just writing git push origin when working on your local main branch. This long flag has a corresponding -u short flag.</p> <p>(4) Back in your web browser, refresh your GitHub repository to see that the same commit you made locally has now been pushed to remote. You can use git log locally to see the commit ID and message which should match the ID of the most recent commit on GitHub. This is the result of pushing your changes to your remote repository.</p> <p>Reference</p> <p>These instructions are from COMP 423's mkdocs tutorial.</p>"},{"location":"tutorials/rust-setup/#2-configure-a-dev-container","title":"2. Configure a Dev Container","text":"<p>Open Visual Studio Code and navigate to your newly created directory. In the root of your project, create a new <code>.devcontainer</code> directory and add a <code>devcontainer.json</code> file.  This will be considered \"hidden\". </p> <p>Add the following configuration within this file: <pre><code>{\n    \"name\": \"Rust\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:1-bullseye\",\n    \"customizations\":{\n        \"vscode\":{\n            \"settings\": {},\n            \"extensions\": [\"rust-lang.rust-analyzer\"]\n        }\n    },\n    \"postCreateCommand\": \"\",\n    \"remoteUser\": \"vscode\"\n}\n</code></pre></p> <p>After adding the above configurations, we then want to reopen our project in a dev container. To do so press Ctrl+Shift+P (or Cmd+Shift+P on macOS) and type:  \"Dev Containers: Reopen in Container,\" and selecting the option.</p>"},{"location":"tutorials/rust-setup/#3-create-your-rust-project","title":"3. Create Your Rust Project","text":"<p>Inside the container, let's verify that Rust is installed and is up-to-date with its version. In VS Code, write the following in the terminal:</p> <pre><code>rustc --version\n</code></pre> <p>Now use the cargo new command to create a binary project <pre><code>cargo new hello_comp423 --vcs none\n</code></pre></p> <p>Note</p> <p>Use the flag that does not create a new git repository automatically on your behalf: --vcs none (Version Control System).</p> <p>Then, navigate to this new project by typing:</p> <pre><code>cd hello_comp423\n</code></pre>"},{"location":"tutorials/rust-setup/#4-lets-code-the-hello-comp423-program","title":"4. Let's Code The \"Hello COMP423\" Program","text":"<p>In your project src folder, find the file called <code>main.rs</code> and write the following code in the file:</p> <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#5-build-and-run-your-new-program","title":"5. Build and Run Your New program","text":"<p>We can compile and run the program in two different way (your directory should be <code>/workspaces/rust-hello-comp423/hello_comp423</code>):</p> <p>In your terminal write the following command to compile your program <pre><code>cargo build\n</code></pre> Then, you can see your executable file under the <code>target/debug</code> directory. In your terminal, you can then write the following code to run your program: <pre><code>./target/debug/hello_comp423\n</code></pre></p> <p>Note</p> <p>This is a very similar process to using the <code>gcc</code> commands that you have used in COMP 211.</p> <p>To compile and run in one step, you can write the following code in your terminal:</p> <pre><code>cargo run\n</code></pre> <p>This should output <code>Hello COMP423</code>.</p>"},{"location":"tutorials/rust-setup/#use-cargo-build","title":"Use <code>cargo build</code>","text":""},{"location":"tutorials/rust-setup/#use-cargo-run","title":"Use <code>cargo run</code>","text":""},{"location":"tutorials/rust-setup/#6-push-changes-and-deploy","title":"6. Push Changes and Deploy","text":"<p>Now that your program runs successfully, let's add and commit the changes to your remote repository.  <pre><code>    # Add and commit changes\n    git add .\n    git commit -m \"Created Hello COMP423 in Rust\"\n\n    # Push changes to remote repo \n    git push origin main\n</code></pre> Check that the changes have been committed and pushed to your remote repo on GitHub. </p>"},{"location":"tutorials/rust-setup/#congrats","title":"Congrats!","text":"<p>You've written <code>Hello COMP423</code> in Rust.</p>"},{"location":"tutorials/rust-setup/#references","title":"References","text":"<p>Details on dev containers and mkdocs can be further explored with this COMP 423 mkdocs tutorial.</p>"}]}